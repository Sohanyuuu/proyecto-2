/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,8],$V2=[1,9],$V3=[2,5,10,16],$V4=[1,14],$V5=[12,13],$V6=[1,27],$V7=[1,33],$V8=[1,25],$V9=[1,28],$Va=[1,29],$Vb=[1,30],$Vc=[1,31],$Vd=[1,32],$Ve=[2,15,19,28,37,38,39,40,41],$Vf=[12,33],$Vg=[2,29],$Vh=[1,44],$Vi=[25,33],$Vj=[2,84],$Vk=[1,56],$Vl=[1,59],$Vm=[1,52],$Vn=[1,53],$Vo=[1,54],$Vp=[1,55],$Vq=[1,57],$Vr=[1,58],$Vs=[1,60],$Vt=[1,61],$Vu=[1,62],$Vv=[1,63],$Vw=[2,76],$Vx=[1,69],$Vy=[1,73],$Vz=[1,74],$VA=[1,75],$VB=[1,76],$VC=[1,77],$VD=[1,78],$VE=[1,79],$VF=[1,80],$VG=[1,81],$VH=[1,82],$VI=[1,83],$VJ=[1,84],$VK=[1,85],$VL=[1,86],$VM=[1,87],$VN=[12,25,33,46,47,48,49,50,51,52,53,54,55,56,57,58,59,108],$VO=[12,25,33,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,62,108],$VP=[2,65],$VQ=[1,92],$VR=[1,135],$VS=[1,136],$VT=[2,87],$VU=[1,138],$VV=[1,144],$VW=[1,145],$VX=[1,146],$VY=[1,147],$VZ=[1,143],$V_=[1,140],$V$=[1,141],$V01=[1,142],$V11=[12,25,33,46,47,108],$V21=[12,25,33,46,47,48,49,50,51,52,53,108],$V31=[12,25,33,46,47,48,49,50,51,52,53,54,55,108],$V41=[12,25,33,46,47,48,49,50,51,52,53,54,55,56,57,108],$V51=[19,107,109],$V61=[2,15,19,37,38,39,40,41,87,92,93,94,97,102,107,109,110,111,112],$V71=[1,162],$V81=[2,15,19,37,38,39,40,41,87,92,93,94,97,101,102,107,109,110,111,112],$V91=[1,227],$Va1=[1,226];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CUERPO":4,"EOF":5,"CUERPOP":6,"SINTAXIS":7,"IMPORT":8,"CLASS":9,"Rimport":10,"LISTIMPORT":11,"Spuntoycoma":12,"SPunto":13,"DEFINIR":14,"id":15,"Rclass":16,"Sllavea":17,"PN":18,"Sllavec":19,"LISTACLASS":20,"CUERPOCLASS":21,"TIPO":22,"Sparentesisa":23,"PAR":24,"Sparentesisc":25,"INSTRUCCIONES":26,"VAR":27,"Rvoid":28,"VOID":29,"METODOCLASE":30,"Rmain":31,"LISTAVAR":32,"Scoma":33,"CUERPOVAR":34,"Rigual":35,"EXPRESION":36,"Rint":37,"Rstring":38,"Rboolean":39,"Rchar":40,"Rdouble":41,"ACCESO":42,"Rprotected":43,"Rpublic":44,"Rprivate":45,"Ry":46,"Ro":47,"Rdobleigual":48,"Rmayoroigual":49,"Rmayor":50,"Rmenoroigual":51,"Rmenor":52,"Rdiferente":53,"Omas":54,"Omenos":55,"Opor":56,"Obarra":57,"Oexponente":58,"Oporciento":59,"CONTENIDOEXPRESION":60,"Odecremento":61,"Oincremento":62,"RNegacion":63,"entero":64,"double":65,"OPCIONAL":66,"Rtrue":67,"Rfalse":68,"cadena":69,"cadenahtml":70,"char":71,"char_especial":72,"FUNCION":73,"DEFPAR":74,"LISTAPAR":75,"METODO":76,"FUNCIONPAR":77,"LISTAINST":78,"LISTAINSTTRUCCIONES":79,"IMPRIMIR":80,"IFANI":81,"WHILE":82,"DOWHILE":83,"FOR":84,"SWITCH":85,"TRANS":86,"Rconsole":87,"Spunto":88,"TIPOIMPRIMIR":89,"Rwrite":90,"RwriteLine":91,"Rbreak":92,"Rcontinue":93,"Rreturn":94,"IF":95,"IFCONT":96,"Rif":97,"ELSIANI":98,"ELSE":99,"ELSEIF":100,"Relse":101,"Rswitch":102,"LISTA_CASE":103,"CASE":104,"RSWITCH":105,"DEFAULT":106,"Rcase":107,"Sdospuntos":108,"def":109,"Rwhile":110,"Rdo":111,"Rfor":112,"FORCONTE":113,"FORFIN":114,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"Rimport",12:"Spuntoycoma",13:"SPunto",15:"id",16:"Rclass",17:"Sllavea",19:"Sllavec",23:"Sparentesisa",25:"Sparentesisc",28:"Rvoid",31:"Rmain",33:"Scoma",35:"Rigual",37:"Rint",38:"Rstring",39:"Rboolean",40:"Rchar",41:"Rdouble",43:"Rprotected",44:"Rpublic",45:"Rprivate",46:"Ry",47:"Ro",48:"Rdobleigual",49:"Rmayoroigual",50:"Rmayor",51:"Rmenoroigual",52:"Rmenor",53:"Rdiferente",54:"Omas",55:"Omenos",56:"Opor",57:"Obarra",58:"Oexponente",59:"Oporciento",61:"Odecremento",62:"Oincremento",63:"RNegacion",64:"entero",65:"double",67:"Rtrue",68:"Rfalse",69:"cadena",70:"cadenahtml",71:"char",72:"char_especial",87:"Rconsole",88:"Spunto",90:"Rwrite",91:"RwriteLine",92:"Rbreak",93:"Rcontinue",94:"Rreturn",97:"Rif",101:"Relse",102:"Rswitch",107:"Rcase",108:"Sdospuntos",109:"def",110:"Rwhile",111:"Rdo",112:"Rfor"},
productions_: [0,[3,2],[4,1],[4,0],[6,1],[6,2],[7,1],[7,1],[7,1],[8,3],[11,3],[11,1],[14,1],[9,5],[18,1],[18,0],[20,2],[20,1],[21,8],[21,1],[21,2],[21,1],[21,1],[29,6],[29,7],[27,3],[32,3],[32,1],[34,3],[34,1],[22,1],[22,1],[22,1],[22,1],[22,1],[42,1],[42,1],[42,1],[42,0],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,2],[36,2],[36,2],[36,2],[36,1],[60,1],[60,1],[60,3],[60,4],[60,1],[60,1],[60,3],[60,1],[60,1],[60,1],[60,1],[60,1],[66,1],[66,3],[73,1],[73,0],[24,2],[24,1],[24,0],[75,3],[75,2],[74,2],[76,4],[76,5],[77,3],[77,1],[77,0],[30,5],[26,1],[26,0],[78,2],[78,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[80,7],[89,1],[89,1],[86,2],[86,2],[86,3],[81,2],[95,7],[96,2],[96,1],[96,1],[96,0],[98,2],[98,1],[99,4],[100,8],[85,7],[103,2],[103,1],[103,1],[103,0],[104,2],[104,1],[106,4],[105,3],[82,7],[83,9],[84,11],[113,4],[113,3],[114,3],[114,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1];
break;
case 3: case 15: case 73: case 76: case 84: case 87: case 120:
 this.$ = [{text:'undefined',icon:'./img/hoja.png'}]; 
break;
case 4:
if($$[$0]!=''){this.$ = [$$[$0]];}else{this.$ = [];}
break;
case 5: case 16: case 88:
if($$[$0]!=''){$$[$0-1].push($$[$0])}; this.$ = $$[$0-1];
break;
case 8: case 22:
this.$ ='';erroresSintacticos.push({ Tipo_Error  : ' Error_Sintactico ', Error  : yytext , Fila  : this._$.first_line , Columna  :  this._$.first_column });erroresLexicosYSintacticos.push({ Tipo_Error  : ' Error_Sintactico ', Error  : yytext , Fila  : this._$.first_line , Columna  :  this._$.first_column });
break;
case 9:
this.$ = API.n_Import($$[$0-1]); tokens.push({Tipo: 'Reservada import',Lexema:$$[$0-2], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Punto y coma',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 10:
 $$[$0-2].push($$[$0]); this.$ =$$[$0-2]; tokens.push({Tipo: 'Punto',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 11: case 27: case 70: case 75: case 83:
this.$ = [$$[$0]];
break;
case 12:
this.$ = API.n_Ident($$[$0]); tokens.push({Tipo: 'Identificador',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 13:
this.$ = API.n_Clase($$[$0-3],$$[$0-1]); tokens.push({Tipo: 'Reservada class',Lexema:$$[$0-4], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Identificador',Lexema:$$[$0-3], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Llave a',Lexema:$$[$0-2], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Llave c',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 17:
if($$[$0]==''){this.$ = [];}else{this.$ = [$$[$0]];}
break;
case 18:
this.$ =API.n_Metodo_Funcion($$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1]); tokens.push({Tipo: 'Identificador',Lexema:$$[$0-6], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Parentesis a',Lexema:$$[$0-5], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Parentesis c',Lexema:$$[$0-3], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Llave a',Lexema:$$[$0-2], Fila:this._$.first_line, Columna: this._$.first_column});  tokens.push({Tipo: 'Llave c',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 19: case 21:
this.$=1;
break;
case 20:
this.$ =$$[$0]; tokens.push({Tipo: 'Reservada void',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 23:
this.$ = API.n_Metodo_Principal($$[$0-1]); tokens.push({Tipo: 'Reservada main',Lexema:$$[$0-5], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Parentesis a',Lexema:$$[$0-4], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Parentesis c',Lexema:$$[$0-3], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Llave a',Lexema:$$[$0-2], Fila:this._$.first_line, Columna: this._$.first_column});  tokens.push({Tipo: 'Llave c',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 24:
this.$ = API.n_Metodo($$[$0-6],$$[$0-4],$$[$0-1]); tokens.push({Tipo: 'Identificador',Lexema:$$[$0-6], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Parentesis a',Lexema:$$[$0-5], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Parentesis c',Lexema:$$[$0-3], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Llave a',Lexema:$$[$0-2], Fila:this._$.first_line, Columna: this._$.first_column});  tokens.push({Tipo: 'Llave c',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 25:
this.$ = API.n_Declaracion($$[$0-2] , $$[$0-1]); tokens.push({Tipo: 'Punto y coma',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 26: case 77:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2]; tokens.push({Tipo: 'Coma',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 28:
this.$ = API.n_Variable($$[$0-2],$$[$0]); tokens.push({Tipo: 'Identificador',Lexema:$$[$0-2], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Igual',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 29:
this.$ = API.n_Variable($$[$0],'undefined'); tokens.push({Tipo: 'Identificador',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 30:
this.$ = TIPO.INT; tokens.push({Tipo: 'Reservada int',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 31:
this.$ = TIPO.STRING; tokens.push({Tipo: 'Reservada string',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 32:
this.$ = TIPO.BOOLEAN; tokens.push({Tipo: 'Reservada boolean',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 33:
this.$ = TIPO.CHAR; tokens.push({Tipo: 'Reservada char',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 34:
this.$ = TIPO.DOUBLE; tokens.push({Tipo: 'Reservada double',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 35:
this.$ = $$[$0]; tokens.push({Tipo: 'Reservada protected',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 36:
this.$ = $$[$0]; tokens.push({Tipo: 'Reservada public',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 37:
this.$ = $$[$0]; tokens.push({Tipo: 'Reservada private',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 38:
 this.$ = 'undefined'; 
break;
case 39:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.AND); tokens.push({Tipo: 'Comparador y',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 40:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.OR); tokens.push({Tipo: 'Comparador o',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 41:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.IGUAL_IGUAL); tokens.push({Tipo: 'Doble igual',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 42:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.MAYOR_IGUAL_QUE); tokens.push({Tipo: 'Mayor o igual',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 43:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.MAYOR_QUE); tokens.push({Tipo: 'Mayor',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 44:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.MENOR_IGUAL_QUE); tokens.push({Tipo: 'Menor o igual',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 45:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.MENOR_QUE); tokens.push({Tipo: 'menor',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 46:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.DISTINTO); tokens.push({Tipo: 'distinto',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 47:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.SUMA); tokens.push({Tipo: 'Mas',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 48:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.RESTA); tokens.push({Tipo: 'menos',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 49:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.MULTIPLICACION); tokens.push({Tipo: 'por',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 50:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.DIVISION); tokens.push({Tipo: 'division',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 51:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.POTENCIA); tokens.push({Tipo: 'potencia',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 52:
 this.$ = API.operacion_Binaria($$[$0-2],$$[$0],TIPO_OPERACION.MODULO); tokens.push({Tipo: 'por ciento',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 53:
 this.$ = API.operacion_Unaria($$[$0-1],TIPO_OPERACION.MODULO); tokens.push({Tipo: 'incremento',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 54:
 this.$ = API.operacion_Unaria($$[$0-1],TIPO_OPERACION.DECREMENTO); tokens.push({Tipo: 'decremento',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 55:
 this.$ = API.operacion_Unaria($$[$0],TIPO_OPERACION.NEGATIVO); tokens.push({Tipo: 'menor',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 56:
 this.$ = API.operacion_Unaria($$[$0],TIPO_OPERACION.NOT); tokens.push({Tipo: 'distinto',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 57:
 this.$ = $$[$0]; 
break;
case 58:
this.$ = API.n_Dato($$[$0],TIPO.INT); tokens.push({Tipo: 'Entero',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 59:
this.$ = API.n_Dato($$[$0],TIPO.DOUBLE); tokens.push({Tipo: 'Double',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column}); 
break;
case 60:
this.$ = API.n_Funcion($$[$0-2],'undefined'); tokens.push({Tipo: 'Identificador',Lexema:$$[$0-2], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Parentesis a',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Parentesis c',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 61:
this.$ = API.n_Funcion($$[$0-3],$$[$0-1]); tokens.push({Tipo: 'Identificador',Lexema:$$[$0-3], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Parentesis a',Lexema:$$[$0-2], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Parentesis c',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 62:
this.$ = API.n_Dato($$[$0],TIPO.BOOLEAN); tokens.push({Tipo: 'reservada true',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 63:
this.$ = API.n_Dato($$[$0],TIPO.BOOLEAN); tokens.push({Tipo: 'reservada false',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 64:
this.$ = $$[$0-1];  tokens.push({Tipo: 'Parentesis a',Lexema:$$[$0-2], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Parentesis c',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 65:
this.$ = API.n_Dato($$[$0],TIPO.IDENTIFICADOR); tokens.push({Tipo: 'Identificador',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 66:
this.$ = API.n_Dato($$[$0],TIPO.STRING); tokens.push({Tipo: 'String',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 67:
this.$ = API.n_Dato($$[$0],TIPO.STRING_e); tokens.push({Tipo: 'html',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 68: case 69:
this.$ = API.n_Dato($$[$0],TIPO.CHAR); tokens.push({Tipo: 'Char',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 71:
$$[$0-2].push($$[$0-1]); this.$ = $$[$0-2]; tokens.push({Tipo: 'Punto y coma',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 72: case 86:
this.$ = $$[$0];
break;
case 74:

        var obj_if = []; 
        if(Array.isArray($$[$0]) && !Array.isArray($$[$0-1])){
            $$[$0].unshift($$[$0-1]); 
            this.$ = $$[$0];
        }else if(Array.isArray($$[$0-1]) && !Array.isArray($$[$0])){
            $$[$0-1].push($$[$0]); 
            this.$ = $$[$0-1];
        } else{
                obj_if.push($$[$0]);
                obj_if.unshift($$[$0-1]);
                this.$ = obj_if;
        } 
    
break;
case 78:
this.$ =[$$[$0]]; tokens.push({Tipo: 'Coma',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 79:
this.$ = API.n_ParametroM($$[$0-1],$$[$0]); tokens.push({Tipo: 'Identificador',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 80:
this.$ = API.n_Asignacion($$[$0-3],$$[$0-1]); tokens.push({Tipo: 'Identificador',Lexema:$$[$0-3], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Igual',Lexema:$$[$0-2], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Punto y coma',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 81:
this.$ = API.n_Funcion($$[$0-4],$$[$0-2]); tokens.push({Tipo: 'Identificador',Lexema:$$[$0-4], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Parentesis a',Lexema:$$[$0-3], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Parentesis c',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Punto y coma',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 82:
 $$[$0-2].push($$[$0]);  this.$ = $$[$0-2]; tokens.push({Tipo: 'Coma',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 85:
this.$ = API.n_Funcion($$[$0-4],API.n_Parametro($$[$0-2])); tokens.push({Tipo: 'Identificador',Lexema:$$[$0-4], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Parentesis a',Lexema:$$[$0-3], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Parentesis c',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Punto y coma',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 89:

        if(Array.isArray($$[$0])){
            if($$[$0]!=''){
                this.$ = $$[$0];
            }else{
                this.$ = [];
            }
            }else{
                if($$[$0]!=''){
                  this.$ = [$$[$0]];
                }else{
                    this.$=[];
                }
            }
        
break;
case 99:
this.$ =''; erroresSintacticos.push({ Tipo_Error  : ' Error_Sintactico ', Error  : yytext , Fila  : this._$.first_line , Columna  :  this._$.first_column });erroresLexicosYSintacticos.push({ Tipo_Error  : ' Error_Sintactico ', Error  : yytext , Fila  : this._$.first_line , Columna  :  this._$.first_column });
break;
case 100:
this.$ = API.n_Impresion($$[$0-4],$$[$0-2]); tokens.push({Tipo: 'Reservada Console',Lexema:$$[$0-6], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Punto',Lexema:$$[$0-5], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Parentesis a',Lexema:$$[$0-3], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Parentesis c',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Punto y coma',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 101:
this.$ = INSTRUCCIONES_CONST.IMPRIMIR; tokens.push({Tipo: 'reservada write',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 102:
this.$ = INSTRUCCIONES_CONST.IMPRIMIR_LN; tokens.push({Tipo: 'reservada writeline',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 103:
 this.$ = API.n_Break(); tokens.push({Tipo: 'reservada break',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Punto y coma',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 104:
 this.$ = API.n_Continue(); tokens.push({Tipo: 'reservada continue',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Punto y coma',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 105:
 this.$ = API.n_Return($$[$0-1]); tokens.push({Tipo: 'reservada return',Lexema:$$[$0-2], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Punto y coma',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 106:
 
        var obj_if = []; 
        if($$[$0] !=null){
            if(Array.isArray($$[$0-1]) && !Array.isArray($$[$0])){
                $$[$0-1].push($$[$0]); 
                this.$ = $$[$0-1];
            }else if(Array.isArray($$[$0]) && !Array.isArray($$[$0-1])){
                $$[$0].unshift($$[$0-1]); 
                this.$ = $$[$0];
            } else{
                obj_if.push($$[$0]);
                obj_if.unshift($$[$0-1]);
                this.$ = obj_if;
            }
        }else{
            this.$ = $$[$0-1];
        }
    
break;
case 107:
this.$ = API.n_If($$[$0-4],$$[$0-1]); tokens.push({Tipo: 'Reservada if',Lexema:$$[$0-6], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Parentesis a',Lexema:$$[$0-5], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Parentesis c',Lexema:$$[$0-3], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'llave a',Lexema:$$[$0-2], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'llave c',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 108: case 117:
 
        var obj_if = []; 
        if(Array.isArray($$[$0-1]) && !Array.isArray($$[$0])){
            $$[$0-1].push($$[$0]); 
            this.$ = $$[$0-1];
        }else if(Array.isArray($$[$0]) && !Array.isArray($$[$0-1])){
            $$[$0].unshift($$[$0-1]); 
            this.$ = $$[$0];
        } else{
            obj_if.push($$[$0]);
            obj_if.unshift($$[$0-1]);
            this.$ = obj_if;
        }
    
break;
case 109: case 118:
  
        var obj_if = []; 
        if(Array.isArray($$[$0])){ 
            this.$ =$$[$0];
        } else{ 
            obj_if.push($$[$0]);
            this.$ = obj_if;
        }
    
break;
case 110: case 119:
 
        var obj_if = []; 
        if(Array.isArray($$[$0])){ 
            this.$ =$$[$0];
        } else{ 
            obj_if.push($$[$0]);
            this.$ = obj_if;
        } 
    
break;
case 112: case 121:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];  
break;
case 113: case 122:
 this.$ = [$$[$0]];  
break;
case 114:
 this.$ = API.n_Else($$[$0-1]);  tokens.push({Tipo: 'Reservada else',Lexema:$$[$0-3], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Llave a',Lexema:$$[$0-2], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Llave c',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 115:
 this.$ = API.n_ElseIf($$[$0-4],$$[$0-1]); tokens.push({Tipo: 'reservda else',Lexema:$$[$0-7], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'reservada if',Lexema:$$[$0-6], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'parentesis a',Lexema:$$[$0-5], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'parentesis c',Lexema:$$[$0-3], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'llave a',Lexema:$$[$0-2], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'llave c',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 116:
this.$ = API.n_Switch($$[$0-4],$$[$0-1]); tokens.push({Tipo: 'reservda switch',Lexema:$$[$0-6], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'parentesis a',Lexema:$$[$0-5], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'parentesis c',Lexema:$$[$0-3], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'llave a',Lexema:$$[$0-2], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'llave c',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 123:
this.$ = API.n_Case($$[$0-2],$$[$0]); tokens.push({Tipo: 'reservada case',Lexema:$$[$0-3], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Dos puntos',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 124:
this.$ = API.n_Default($$[$0]); tokens.push({Tipo: 'reservada default',Lexema:$$[$0-2], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'dos puntos',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 125:
this.$ = API.n_While($$[$0-4],$$[$0-1]); tokens.push({Tipo: 'Reservada while',Lexema:$$[$0-6], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Parentesis a',Lexema:$$[$0-5], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'parentesis c',Lexema:$$[$0-3], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'llave a',Lexema:$$[$0-2], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'llave c',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 126:
 this.$ = API.n_DoWhile($$[$0-6],$$[$0-2]); tokens.push({Tipo: 'reservda do',Lexema:$$[$0-8], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'llave a',Lexema:$$[$0-7], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'llave c',Lexema:$$[$0-5], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'reservada while',Lexema:$$[$0-4], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'parentesis a',Lexema:$$[$0-3], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'parentesis c',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Punto y coma',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 127:
 this.$ = API.n_For( $$[$0-8] , $$[$0-6] , $$[$0-4] , $$[$0-1]);tokens.push({Tipo: 'reservada for',Lexema:$$[$0-10], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'parentesis a',Lexema:$$[$0-9], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'punto y coma',Lexema:$$[$0-7], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'punto y coma',Lexema:$$[$0-5], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'parentesis c',Lexema:$$[$0-3], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'llave a',Lexema:$$[$0-2], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'llave c',Lexema:$$[$0], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 128:
this.$ = API.n_Declaracion($$[$0-3] , API.n_Variable($$[$0-2],$$[$0])); tokens.push({Tipo: 'Identificador',Lexema:$$[$0-2], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Igual',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column});
break;
case 129: case 130:
this.$ = API.n_Asignacion($$[$0-2],$$[$0]); tokens.push({Tipo: 'Identificador',Lexema:$$[$0-2], Fila:this._$.first_line, Columna: this._$.first_column}); tokens.push({Tipo: 'Igual',Lexema:$$[$0-1], Fila:this._$.first_line, Columna: this._$.first_column});
break;
}
},
table: [{2:$V0,3:1,4:2,5:[2,3],6:3,7:4,8:5,9:6,10:$V1,16:$V2},{1:[3]},{5:[1,10]},{2:$V0,5:[2,2],7:11,8:5,9:6,10:$V1,16:$V2},o($V3,[2,4]),o($V3,[2,6]),o($V3,[2,7]),o($V3,[2,8]),{11:12,14:13,15:$V4},{15:[1,15]},{1:[2,1]},o($V3,[2,5]),{12:[1,16],13:[1,17]},o($V5,[2,11]),o($V5,[2,12]),{17:[1,18]},o($V3,[2,9]),{14:19,15:$V4},{2:$V6,15:$V7,18:20,19:[2,15],20:21,21:22,22:23,27:24,28:$V8,30:26,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd},o($V5,[2,10]),{19:[1,34]},{2:$V6,15:$V7,19:[2,14],21:35,22:23,27:24,28:$V8,30:26,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd},o($Ve,[2,17]),{15:[1,36],32:37,34:38},o($Ve,[2,19]),{15:[1,41],29:39,31:[1,40]},o($Ve,[2,21]),o($Ve,[2,22]),{15:[2,30]},{15:[2,31]},{15:[2,32]},{15:[2,33]},{15:[2,34]},{23:[1,42]},o($V3,[2,13]),o($Ve,[2,16]),o($Vf,$Vg,{23:[1,43],35:$Vh}),{12:[1,45],33:[1,46]},o($Vf,[2,27]),o($Ve,[2,20]),{23:[1,47]},{23:[1,48]},o($Vi,$Vj,{77:49,36:50,60:51,15:$Vk,23:$Vl,55:$Vm,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv}),{22:66,24:64,25:$Vw,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,74:65},{15:$Vk,23:$Vl,36:67,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv},o([2,15,19,28,37,38,39,40,41,87,92,93,94,97,102,107,109,110,111,112],[2,25]),{15:$Vx,34:68},{25:[1,70]},{22:66,24:71,25:$Vw,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,74:65},{25:[1,72],33:$Vy},o($Vi,[2,83],{46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM}),o($VN,[2,57],{61:[1,88],62:[1,89]}),{15:$Vk,23:$Vl,36:90,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv},{15:$Vk,23:$Vl,36:91,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv},o($VO,[2,58]),o($VO,[2,59]),o($VO,$VP,{23:$VQ}),o($VO,[2,62]),o($VO,[2,63]),{15:$Vk,23:$Vl,36:93,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv},o($VO,[2,66]),o($VO,[2,67]),o($VO,[2,68]),o($VO,[2,69]),{25:[1,94]},{25:[2,75],33:[1,96],75:95},{15:[1,97]},o($Vf,[2,28],{46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM}),o($Vf,[2,26]),o($Vf,$Vg,{35:$Vh}),{17:[1,98]},{25:[1,99]},{12:[1,100]},{15:$Vk,23:$Vl,36:101,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv},{15:$Vk,23:$Vl,36:102,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv},{15:$Vk,23:$Vl,36:103,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv},{15:$Vk,23:$Vl,36:104,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv},{15:$Vk,23:$Vl,36:105,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv},{15:$Vk,23:$Vl,36:106,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv},{15:$Vk,23:$Vl,36:107,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv},{15:$Vk,23:$Vl,36:108,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv},{15:$Vk,23:$Vl,36:109,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv},{15:$Vk,23:$Vl,36:110,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv},{15:$Vk,23:$Vl,36:111,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv},{15:$Vk,23:$Vl,36:112,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv},{15:$Vk,23:$Vl,36:113,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv},{15:$Vk,23:$Vl,36:114,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv},{15:$Vk,23:$Vl,36:115,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv},o($VN,[2,53]),o($VN,[2,54]),o($VN,[2,55]),o($VN,[2,56]),{15:$Vk,23:$Vl,25:[1,116],36:118,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,66:117,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv},{25:[1,119],46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM},{17:[1,120]},{25:[2,74],33:[1,121]},{22:66,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,74:122},o($Vi,[2,79]),{2:$VR,15:$VS,19:$VT,22:137,26:123,27:127,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,76:126,78:124,79:125,80:128,81:129,82:130,83:131,84:132,85:133,86:134,87:$VU,92:$VV,93:$VW,94:$VX,95:139,97:$VY,102:$VZ,110:$V_,111:$V$,112:$V01},{17:[1,148]},o($Ve,[2,85]),o($Vi,[2,82],{46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM}),o($V11,[2,39],{48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM}),o($V11,[2,40],{48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM}),o($V21,[2,41],{54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM}),o($V21,[2,42],{54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM}),o($V21,[2,43],{54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM}),o($V21,[2,44],{54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM}),o($V21,[2,45],{54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM}),o($V21,[2,46],{54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM}),o($V31,[2,47],{56:$VJ,57:$VK,58:$VL,59:$VM}),o($V31,[2,48],{56:$VJ,57:$VK,58:$VL,59:$VM}),o($V41,[2,49],{58:$VL,59:$VM}),o($V41,[2,50],{58:$VL,59:$VM}),o($VN,[2,51]),o($VN,[2,52]),o($VO,[2,60]),{25:[1,149],33:[1,150]},o($Vi,[2,70],{46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM}),o($VO,[2,64]),{2:$VR,15:$VS,19:$VT,22:137,26:151,27:127,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,76:126,78:124,79:125,80:128,81:129,82:130,83:131,84:132,85:133,86:134,87:$VU,92:$VV,93:$VW,94:$VX,95:139,97:$VY,102:$VZ,110:$V_,111:$V$,112:$V01},{22:66,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,74:152},o($Vi,[2,78]),{19:[1,153]},o($V51,[2,86],{76:126,27:127,80:128,81:129,82:130,83:131,84:132,85:133,86:134,22:137,95:139,79:154,2:$VR,15:$VS,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,87:$VU,92:$VV,93:$VW,94:$VX,97:$VY,102:$VZ,110:$V_,111:$V$,112:$V01}),o($V61,[2,89]),o($V61,[2,90]),o($V61,[2,91]),o($V61,[2,92]),o($V61,[2,93]),o($V61,[2,94]),o($V61,[2,95]),o($V61,[2,96]),o($V61,[2,97]),o($V61,[2,98]),o($V61,[2,99]),{23:[1,156],35:[1,155]},{15:$Vx,32:37,34:38},{88:[1,157]},o($V61,[2,111],{96:158,98:159,99:160,100:161,101:$V71}),{23:[1,163]},{17:[1,164]},{23:[1,165]},{23:[1,166]},{12:[1,167]},{12:[1,168]},{12:[2,73],15:$Vk,23:$Vl,36:170,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,73:169},{23:[1,171]},{2:$VR,15:$VS,19:$VT,22:137,26:172,27:127,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,76:126,78:124,79:125,80:128,81:129,82:130,83:131,84:132,85:133,86:134,87:$VU,92:$VV,93:$VW,94:$VX,95:139,97:$VY,102:$VZ,110:$V_,111:$V$,112:$V01},o($VO,[2,61]),{15:$Vk,23:$Vl,36:173,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv},{19:[1,174]},o($Vi,[2,77]),o($Ve,[2,23]),o($V61,[2,88]),{15:$Vk,23:$Vl,36:175,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv},o($Vi,$Vj,{36:50,60:51,77:176,15:$Vk,23:$Vl,55:$Vm,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv}),{89:177,90:[1,178],91:[1,179]},o($V61,[2,106]),o($V61,[2,109],{99:180,100:181,101:$V71}),o($V61,[2,110]),o($V81,[2,113]),{17:[1,182],97:[1,183]},{15:$Vk,23:$Vl,36:184,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv},{2:$VR,15:$VS,19:$VT,22:137,26:185,27:127,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,76:126,78:124,79:125,80:128,81:129,82:130,83:131,84:132,85:133,86:134,87:$VU,92:$VV,93:$VW,94:$VX,95:139,97:$VY,102:$VZ,110:$V_,111:$V$,112:$V01},{15:[1,188],22:187,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,113:186},{15:$Vk,23:$Vl,36:189,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv},o($V61,[2,103]),o($V61,[2,104]),{12:[1,190]},{12:[2,72],46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM},{15:$Vk,23:$Vl,36:191,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv},{19:[1,192]},o($Vi,[2,71],{46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM}),o($Ve,[2,18]),{12:[1,193],46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM},{25:[1,194],33:$Vy},{23:[1,195]},{23:[2,101]},{23:[2,102]},o($V61,[2,108]),o($V81,[2,112]),{2:$VR,15:$VS,19:$VT,22:137,26:196,27:127,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,76:126,78:124,79:125,80:128,81:129,82:130,83:131,84:132,85:133,86:134,87:$VU,92:$VV,93:$VW,94:$VX,95:139,97:$VY,102:$VZ,110:$V_,111:$V$,112:$V01},{23:[1,197]},{25:[1,198],46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM},{19:[1,199]},{12:[1,200]},{15:[1,201]},{35:[1,202]},{25:[1,203],46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM},o($V61,[2,105]),{25:[1,204],46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM},o($Ve,[2,24]),o($V61,[2,80]),{12:[1,205]},{15:$Vk,23:$Vl,36:206,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv},{19:[1,207]},{15:$Vk,23:$Vl,36:208,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv},{17:[1,209]},{110:[1,210]},{15:$Vk,23:$Vl,36:211,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv},{35:[1,212]},{15:$Vk,23:$Vl,36:213,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv},{17:[1,214]},{17:[1,215]},o($V61,[2,81]),{25:[1,216],46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM},o($V61,[2,114]),{25:[1,217],46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM},{2:$VR,15:$VS,19:$VT,22:137,26:218,27:127,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,76:126,78:124,79:125,80:128,81:129,82:130,83:131,84:132,85:133,86:134,87:$VU,92:$VV,93:$VW,94:$VX,95:139,97:$VY,102:$VZ,110:$V_,111:$V$,112:$V01},{23:[1,219]},{12:[1,220],46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM},{15:$Vk,23:$Vl,36:221,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv},{12:[2,129],46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM},{19:[2,120],103:222,104:223,105:224,106:225,107:$V91,109:$Va1},{2:$VR,15:$VS,19:$VT,22:137,26:228,27:127,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,76:126,78:124,79:125,80:128,81:129,82:130,83:131,84:132,85:133,86:134,87:$VU,92:$VV,93:$VW,94:$VX,95:139,97:$VY,102:$VZ,110:$V_,111:$V$,112:$V01},{12:[1,229]},{17:[1,230]},{19:[1,231]},{15:$Vk,23:$Vl,36:232,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv},{15:[1,234],23:$Vl,36:235,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv,114:233},{12:[2,128],46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM},{19:[1,236]},{19:[2,118],105:237,106:238,107:$V91,109:$Va1},{19:[2,119]},o($V51,[2,122]),{108:[1,239]},{15:$Vk,23:$Vl,36:240,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv},{19:[1,241]},o($V61,[2,100]),{2:$VR,15:$VS,19:$VT,22:137,26:242,27:127,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,76:126,78:124,79:125,80:128,81:129,82:130,83:131,84:132,85:133,86:134,87:$VU,92:$VV,93:$VW,94:$VX,95:139,97:$VY,102:$VZ,110:$V_,111:$V$,112:$V01},o($V61,[2,125]),{25:[1,243],46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM},{25:[1,244]},o([25,46,47,48,49,50,51,52,53,54,55,56,57,58,59,61,62],$VP,{23:$VQ,35:[1,245]}),{25:[2,131],46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM},o($V61,[2,116]),{19:[2,117]},o($V51,[2,121]),{2:$VR,15:$VS,19:$VT,22:137,26:246,27:127,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,76:126,78:124,79:125,80:128,81:129,82:130,83:131,84:132,85:133,86:134,87:$VU,92:$VV,93:$VW,94:$VX,95:139,97:$VY,102:$VZ,110:$V_,111:$V$,112:$V01},{46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,108:[1,247]},o($V81,[2,107]),{19:[1,248]},{12:[1,249]},{17:[1,250]},{15:$Vk,23:$Vl,36:251,55:$Vm,60:51,63:$Vn,64:$Vo,65:$Vp,67:$Vq,68:$Vr,69:$Vs,70:$Vt,71:$Vu,72:$Vv},{19:[2,124]},o($V51,$VT,{78:124,79:125,76:126,27:127,80:128,81:129,82:130,83:131,84:132,85:133,86:134,22:137,95:139,26:252,2:$VR,15:$VS,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,87:$VU,92:$VV,93:$VW,94:$VX,97:$VY,102:$VZ,110:$V_,111:$V$,112:$V01}),o($V81,[2,115]),o($V61,[2,126]),{2:$VR,15:$VS,19:$VT,22:137,26:253,27:127,37:$V9,38:$Va,39:$Vb,40:$Vc,41:$Vd,76:126,78:124,79:125,80:128,81:129,82:130,83:131,84:132,85:133,86:134,87:$VU,92:$VV,93:$VW,94:$VX,95:139,97:$VY,102:$VZ,110:$V_,111:$V$,112:$V01},{25:[2,130],46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM},o($V51,[2,123]),{19:[1,254]},o($V61,[2,127])],
defaultActions: {10:[2,1],28:[2,30],29:[2,31],30:[2,32],31:[2,33],32:[2,34],178:[2,101],179:[2,102],224:[2,119],237:[2,117],246:[2,124]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const TIPO = require('./api_cast').TIPO;
    const TIPO_OPERACION = require('./api_cast').TIPO_OPERACION;
    const INSTRUCCIONES_CONST = require('./api_cast').TIPO_INSTRUCCION;
    const API = require('./api_cast').API;
    let erroresLexicos = [];
    let erroresSintacticos = [];
    let erroresLexicosYSintacticos = [];
    let tokens = [];

    exports.tks = function(){
        return tokens;
    }

    exports.errL = function(){
        return erroresLexicos;
    }

    exports.errS = function(){
        return erroresSintacticos;
    }

    exports.LimpiarV = function(){
        erroresLexicos = [];
        erroresSintacticos = [];
        erroresLexicosYSintacticos = [];
        tokens=[];
    }

    exports.errLS = function(){
        return erroresLexicosYSintacticos;
    } 
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"yylineno":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* salta espacios en blanco */
break;
case 1:/* comentario simple*/
break;
case 2:/*comentario multilinea*/
break;
case 3:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 69; 
break;
case 4:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 70; 
break;
case 5:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 72;
break;
case 6:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 71;
break;
case 7:return 37;
break;
case 8:return 41;
break;
case 9:return 39;
break;
case 10:return 40;
break;
case 11:return 38;
break;
case 12:return 38;
break;
case 13:return 10;
break;
case 14:return 28;
break;
case 15:return 16;
break;
case 16:return 31;
break;
case 17:return 97;
break;
case 18:return 101;
break;
case 19:return 102;
break;
case 20:return 112;
break;
case 21:return 110;
break;
case 22:return 111;
break;
case 23:return 92;
break;
case 24:return 93;
break;
case 25:return 94;
break;
case 26:return 44;
break;
case 27:return 43;
break;
case 28:return 45;
break;
case 29:return 87;
break;
case 30:return 'Rout';
break;
case 31:return 91;
break;
case 32:return 90;
break;
case 33:return 67;
break;
case 34:return 68;
break;
case 35:return 107;
break;
case 36:return 109;
break;
case 37:return 108;
break;
case 38:return 12;
break;
case 39:return 17;
break;
case 40:return 19;
break;
case 41:return 23;
break;
case 42:return 25;
break;
case 43:return 88;
break;
case 44:return 'Scomilla';
break;
case 45:return 33;
break;
case 46:return 'Scomilladoble';
break;
case 47:return 62;
break;
case 48:return 61;
break;
case 49:return 54;
break;
case 50:return 55;
break;
case 51:return 56;
break;
case 52:return 57;
break;
case 53:return 58;
break;
case 54:return 59;
break;
case 55:return 51;
break;
case 56:return 49;
break;
case 57:return 48;
break;
case 58:return 35;
break;
case 59:return 53;
break;
case 60:return 52;
break;
case 61:return 50;
break;
case 62:return 63;
break;
case 63:return 46;
break;
case 64:return 47;
break;
case 65:return 65;
break;
case 66:return 64;
break;
case 67:return 15;
break;
case 68:return 5;
break;
case 69:erroresLexicos.push({Tipo_Error: 'Error_Lexico',Error : yy_.yytext , Fila  : yy_.yylloc.first_line , Columna  :  yy_.yylloc.first_column });erroresLexicosYSintacticos.push({ Tipo_Error  : ' Error_Lexico ', Error  : yy_.yytext , Fila  : yy_.yylloc.first_line , Columna  :  yy_.yylloc.first_column });
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[\"][^\\\"]*([\\][\\\"ntr][^\\\"]*)*[\"])/,/^(?:'[^\']*')/,/^(?:[\'][\\][\"\'nrt\\][\'])/,/^(?:[\'][^\'\\\"][\'])/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:string\b)/,/^(?:import\b)/,/^(?:void\b)/,/^(?:class\b)/,/^(?:main\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:for\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:public\b)/,/^(?:protected\b)/,/^(?:private\b)/,/^(?:Console\b)/,/^(?:out\b)/,/^(?:WriteLine\b)/,/^(?:Write\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?::)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:\\')/,/^(?:,)/,/^(?:")/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}